"""
Объекты asyncio.Lock() могут использоваться с оператором with.
Объекты asyncio.Lock() являются контекстными менеджерами, поэтому их можно использовать с
оператором with:
    async with lock:
        # Критическая секция кода реализующая любую логику
Этот способ использования мьютекса автоматически освобождает мьютекс при выходе из контекста.
Такой вариант работы с мьютексом предпочтителен, так как после завершения работы критической
секции кода он будет автоматически освобожден. При этом важно понимать, что в случае возникновения
зависания внутри данного участка кода - мьютекс будет заблокирован и другие задачи, пытающиеся его
захватить, выполнены не будут. Такая ситуация называется дедлоком (deadlock).
"""

import asyncio


class Room:
    def __init__(self):
        self.lock = asyncio.Lock()

    async def use(self, name):
        # Использование менеджера контекста для работы с замком
        async with self.lock:
            print(f"{name} вошел в комнату.")
            # Имитация выполнения работы внутри комнаты
            await asyncio.sleep(1)
            print(f"{name} вышел из комнаты.")


async def person(name, room):
    # Человек (задача) пытается использовать комнату
    print(f"{name} хочет войти в комнату.")
    await room.use(name)


async def main():
    room = Room()  # Инициализация комнаты с замком

    # Создание задач для нескольких людей, пытающихся войти в комнату
    await asyncio.gather(
        person("Алексей", room), person("Мария", room), person("Иван", room)
    )


asyncio.run(main())

"""
Мьютекс желательно использовать для тех задач, где возможно возникновение состояния гонки: 
    1). Общие структуры данных: Если несколько задач читают и изменяют общую структуру данных
    (например, список, словарь или пользовательский объект), мьютекс может быть использован для
    обеспечения согласованности данных и предотвращения состояния гонки.
    2). Доступ к файлам: Если несколько задач записывают данные в один и тот же файл, мьютекс может
    быть использован для синхронизации доступа к файлу и обеспечения корректной записи данных.
    3). Общие ресурсы системы: Если задачи используют общие ресурсы системы, такие как сетевые 
    соединения или устройства, мьютекс может использоваться для синхронизации доступа и
    предотвращения конфликтов.
    4) Кэширование: Мьютекс также может использоваться для синхронизации доступа к кэшированным 
    данным между задачами и предотвращения ситуации, когда несколько задач пытаются одновременно
    обновить кэш.
"""