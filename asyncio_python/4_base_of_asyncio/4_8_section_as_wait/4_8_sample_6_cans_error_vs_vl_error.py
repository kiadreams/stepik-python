import asyncio

"""
смотрите, запуск цикла событий с помощью asyncio.run(main()) происходит
следующим образом:

    Из переданной в run() корутины создается и запускается задача Task-1.
    Эта задача является основным потоком выполнения инструкций цикла событий.
    Когда все инструкции окажутся выполненными, цикл событий завершает свою 
    работу. Корректное завершение цикла событий подразумевает отмену всех 
    задач, которые были запущены, но не ожидаются в Task-1.

Собственно вот эта отмена и перехватывается в задаче, которая была отменена.
У исключений есть две точки, где их можно перехватить и обработать. Первая - 
это сама задача, в которой было вызвано исключение, вторая - это место ожидания
завершения/получения результата этой задачи (это про возникновение
CancelledError при получении результата). Если не перехватывать, получите
предупреждение о Task exception was never retrieved. Однако asyncio.
CancelledError в контексте асинхронного программирования Python считается
нормальным событием, а не критической ошибкой, и интерпретатор не воспринимает
его как необработанное исключение, которое привело бы к завершению программы с
ошибкой. Это отличается от других необработанных исключений (например,
ValueError или RuntimeError), которые приводят к завершению программы с
сообщением об ошибке. Вот простой пример где можно увидеть разницу в 
поведении исключений, которые не перехватываются.
"""


async def coro():
    print("Начало работы задачи")

    # await asyncio.sleep(1)

    try:
        await asyncio.sleep(1)
    except asyncio.CancelledError:
        print("Перехвачено исключение при отмене в самой корутине!")
        raise

    # raise ValueError("Критическая ошибка")
    # raise asyncio.CancelledError("Отмена задачи")
    print("Работа завершена")


async def main():
    task = asyncio.create_task(coro())
    await asyncio.sleep(0.1)
    try:
        task.cancel('Отмена задачи')
        await asyncio.sleep(0.1)
        print(task.cancelled(), task.done())
        # print(task.exception())
        # print(task.result())
    except asyncio.CancelledError:
        print("Перехвачено исключение в main при отмене задачи в ручную!!!")

    print("Работа программы завершена")


asyncio.run(main())
