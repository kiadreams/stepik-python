import aiofiles
import asyncio


"""
Асинхронное взаимодействие с файлами: когда вы читаете или записываете файлы асинхронно, async 
with обеспечивает автоматическое открытие и закрытие файла, что предотвращает утечки ресурсов.
"""


async def read_file(file_name):
    # Используем async with для открытия файла асинхронно
    async with aiofiles.open(file_name, "r", encoding="UTF-8") as file:
        contents = await file.read()
        print(contents)


asyncio.run(read_file("6_1_sample_1_example.txt"))

"""
Использование async with в асинхронном программировании имеет ряд преимуществ, таких как 
корректное управление ресурсами, автоматическое освобождение и обработка исключений. Однако при 
использовании async with также могут возникнуть некоторые потенциальные проблемы: 
    1). Неправильное использование контекстных менеджеров: если вы используете обычный контекстный 
    менеджер (который определяет __enter__ и __exit__) вместо асинхронного контекстного менеджера 
    (который определяет __aenter__ и __aexit__), это может привести к неправильному управлению 
    ресурсами и возможным блокировкам в вашем асинхронном коде.
     
    2). Неправильная обработка исключений: если исключения не обрабатываются правильно внутри 
    метода __aexit__, это может привести к непредсказуемому поведению вашего асинхронного кода. 
    Убедитесь, что вы обрабатываете исключения корректно и возвращайте True или False из метода 
    __aexit__ в зависимости от того, нужно ли подавить исключение.
     
    3) Неправильная организация кода: если ваш код не разделен на асинхронные функции и вы 
    используете async with внутри обычных функций, это вызовет синтаксическую ошибку. Убедитесь, 
    что вы используете async with только внутри асинхронных функций.
     
    4) Зависимость от сторонних библиотек: в некоторых случаях вам может потребоваться 
    использовать сторонние библиотеки, которые предоставляют асинхронные контекстные менеджеры, 
    такие как aiofiles или aiohttp. Обратите внимание на совместимость и поддержку этих библиотек, 
    а также на то, как они могут повлиять на производительность вашего кода.
"""
