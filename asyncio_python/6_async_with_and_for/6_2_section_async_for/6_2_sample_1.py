"""
Вот основные сценарии, в которых используется async for:
    1). Обработка асинхронных потоков данных: Когда вам нужно обрабатывать большие объемы данных,
    которые поступают по мере готовности, например, чтение из файла или потока данных через сеть.
    2). Работа с асинхронными API: Когда используется асинхронное API для работы с внешними
    сервисами, такими как RESTful API или облачные сервисы, которые возвращают данные по частям.
    3). Websockets и асинхронное общение: Когда работаете с веб-сокетами или асинхронными
    системами обмена сообщениями, где требуется обрабатывать входящие сообщения последовательно
    и без блокировки.
    4). Параллельная обработка задач: Когда вам нужно выполнять множество асинхронных задач
    параллельно и обрабатывать результаты по мере их выполнения.
async for можно использовать в любом случае, когда требуется итерироваться асинхронно через
коллекции. Однако, не следует злоупотреблять использованием async for в случаях, когда итерация
не занимает много времени и не блокирует выполнение других задач. В таких случаях использование
async for может снизить производительность программы из-за дополнительных накладных расходов,
связанных с выполнением асинхронных операций. Лучше использовать обычный for в таких случаях.
"""

import asyncio


# Асинхронный генератор
async def async_gen():
    for i in range(5):  # Итерируемся по диапазону чисел от 0 до 4
        await asyncio.sleep(0.5)
        yield i  # Возвращаем текущее число


async def main():
    async for number in async_gen():  # Используем асинхронный цикл for для итерации
        print(number)


asyncio.run(main())
