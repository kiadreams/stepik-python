import asyncio


async def my_task():
    current_task = asyncio.current_task()
    print(f"Текущий объект задачи: {current_task}")

    await asyncio.sleep(1)

    # Отмена текущей задачи
    current_task.cancel()

    # Попытка отмены задачи не останавливает выполнение немедленно, продолжаем выполнение
    print(420)


async def main():
    try:
        task = asyncio.create_task(my_task())
        await task  # Здесь возникнет CancelledError после попытки отмены
    except asyncio.CancelledError:
        print("Задача была отменена.")
    finally:
        print("Программа завершена без ошибок :)")


asyncio.run(main())

"""
В этом коде блок try/except используется для перехвата исключения CancelledError, что позволяет 
адекватно обрабатывать случаи отмены задачи, а в блоке except выводится сообщение о том, что 
задача была отменена. Дополнительно, блок finally применяется для выполнения всех необходимых 
действий для корректного завершения программы, включая закрытие файлов и освобождение сетевых 
ресурсов независимо от возникновения исключений.
Преимущества такого подхода:

    Улучшенное управление ошибками: программа может адекватно реагировать на исключения, не 
    прекращая свою работу аварийно.
    Контролируемое завершение: finally гарантирует, что необходимые действия по завершению 
    программы будут выполнены независимо от того, произошла ошибка или нет.
"""
