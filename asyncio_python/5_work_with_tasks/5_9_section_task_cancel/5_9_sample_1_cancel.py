import asyncio


"""
task.cancel(msg=None)
Метод task.cancel() используется для отмены задачи. Он отправляет запрос на отмену, но не
гарантирует, что задача будет немедленно остановлена. Задача будет остановлена только в том
случае, если она имеет возможность обработать исключение asyncio.CancelledError, которое будет
вызвано при запросе на отмену. Когда задача отменяется, она переходит в состояние CANCELLED. Если
задача уже была выполнена, то отменить ее уже нельзя.
    - Изменения в версии 3.9: добавлен параметр msg.
    - Изменения в версии 3.11: параметр msg передается от отмененной задачи ее ожидающему объекту.

task.cancelled()
Метод task.cancelled() используется для проверки, была ли задача отменена. Он возвращает True,
если задача отменена, и False в противном случае.

task.cancelling()
Метод task.cancelling() предназначен для получения количества ожидающих запросов на отмену задачи.
Это количество представляет собой разницу между количеством вызовов метода cancel() и количеством
вызовов метода uncancel(). Метод предоставляет внутренний механизм управления отменой задач,
который используется внутренностями asyncio и, как правило, не предназначен для прямого
использования в пользовательском коде.

task.uncancel()
Метод task.uncancel() - используется для отмены запроса на отмену задачи. Он предотвращает отмену
задачи, если она еще не была завершена, то есть, если задача была отменена, но мы вызвали метод
task.uncancel(), то задача перейдет из состояния CANCELLED в состояние PENDING. У данного метода
есть свои нюансы и в большинстве случаев он не предназначен для использования в пользовательском
коде.
"""

# Порядок применения методов:
"""
*Напоминаю, что для получения текущего объекта задачи можно использовать метод
asyncio.current_task(). 
    1) Создайте асинхронную задачу, используя, например, asyncio.create_task().
    2) Выполняйте задачу.
    3) В случае необходимости отмены задачи вызовите метод task.cancel(). 
    4) Дождитесь завершения задачи, используя, например, await task или asyncio.gather(). 
    5) Обязательно обработайте исключение asyncio.CancelledError, если вы дожидаетесь отмены 
    задачи. 
    6) Проверьте состояние задачи после её завершения, вызвав метод task.cancelled() или другие 
    по необходимости
    
На что обращать внимание:
    - Обрабатывайте исключение asyncio.CancelledError для корректного завершения задачи при 
    отмене.
    - Учтите, что отмена задачи не происходит мгновенно, и задача может продолжить выполняться 
    некоторое время после вызова метода cancel().
    - В случае отмены задачи убедитесь, что все ресурсы, используемые задачей, корректно 
    освобождаются.
    - Это можно сделать с помощью обработки исключения asyncio.CancelledError и использования 
    блоков finally или контекстных менеджеров async with для закрытия файлов, сетевых соединений 
    и т. д.
    - В некоторых случаях отмена задачи может привести к нежелательному поведению, например, 
    когда корутина находится в критической секции кода. В таких случаях стоит рассмотреть 
    использование синхронизации (например, с помощью asyncio.Lock, об этом будем говорить далее 
    по курсу) или обработку ошибки внутри корутины, чтобы избежать проблем.
    - Учитывайте, что вызов метода cancel() не гарантирует отмену задачи, если корутина не 
    обрабатывает исключение asyncio.CancelledError или игнорирует его. В этом случае задача может 
    продолжать выполняться и после вызова метода cancel().
"""


# Пример кода с успешной отменой задачи с помощью task.cancel():
async def main_task():
    print("Корутина main_task запустилась")
    await asyncio.sleep(5)
    print("Корутина main_task завершилась")


async def main():
    task = asyncio.create_task(main_task())
    await asyncio.sleep(1)
    task.cancel()  # Отмена задачи (запрос на отмену выполнения корутины main_task())

    try:
        await task
    except asyncio.CancelledError:
        print("Задача отменена")


asyncio.run(main())