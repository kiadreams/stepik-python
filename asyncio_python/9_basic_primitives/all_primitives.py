"""
В asyncio доступны следующие примитивы синхронизации (с некоторыми механизмами вы уже сталкивались
в данном курсе):
    1) asyncio.Lock() - механизм, обеспечивающий монопольный доступ к общему ресурсу.
    Используется для предотвращения одновременного доступа к общему ресурсу из нескольких корутин.
    2) asyncio.Event() - объект, позволяющий организовать доступ к ресурсу на основе заданных
    событий. Он представляет собой сигнальный флаг, который может быть установлен или сброшен, и
    задачи могут ожидать этого события и продолжить выполнение после его возникновения.
    3) asyncio.Condition() - комбинирует функциональность Lock() и Event(). Это объект условия,
    который позволяет задачам ожидать определенного состояния или сигнала, чтобы продолжить
    выполнение. Условие может быть связано с определенным Lock(), и задачи могут ожидать его
    установки и освобождения.
    4) asyncio.Semaphore() - семафорный объект, который позволяет ограничить доступ к общему
    ресурсу заданному количеству задач.
    5) asyncio.BoundedSemaphore() - ограниченная версия семафора, в которой максимальное
    количество доступных задач не может быть увеличено после создания объекта.
    6) asyncio.Barrier() - это простой примитив синхронизации, позволяющий блокировать выполнение
    до тех пор, пока до барьера не дойдет заданное количество задач.
    7) asyncio.Queue() - объект очереди, который обеспечивает безопасный и упорядоченный обмен
    данными между асинхронными задачами. Задачи могут помещать элементы в очередь и извлекать их в
    определенном порядке, в зависимости от типа очереди. Очередь также может быть ограничена по
    размеру, чтобы ограничить потребление ресурсов.
Эти примитивы являются очень мощными инструментами для реализации различных задач синхронизации в
асинхронных приложениях. Они позволяют писать код, который может эффективно использовать
многопоточность, не приводя к конфликтам и ошибкам.
"""