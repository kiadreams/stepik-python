import logging
import logging.config


# Определяем фильтр, который пропускает
# только сообщения с уровнем WARNING и выше
class LevelFilter(logging.Filter):
    def __init__(self, min_level):
        super().__init__()  # Вызов конструктора родительского класса
        self.min_level = min_level  # Сохраняем минимальный уровень логирования

    def filter(self, record):
        # Возвращаем True, если уровень сообщения
        # равен или выше минимального уровня
        return record.levelno >= self.min_level


if __name__ == "__main__":

    # Конфигурация логирования в виде словаря
    logging_config = {
        "version": 1,  # Версия конфигурационного формата
        "disable_existing_loggers": False,  # Не отключать существующих логгеров
        "formatters": {
            "detailed": {  # Форматтер для детализированных сообщений
                "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            },
        },
        "filters": {
            "level_filter": {  # Фильтр, который будем использовать
                "()": "__main__.LevelFilter",  # Путь к нашему фильтру
                "min_level": 30,  # Параметры для фильтра
            },
        },
        "handlers": {
            "console": {  # Обработчик для вывода сообщений в консоль
                "class": "logging.StreamHandler",  # Класс обработчика
                "formatter": "detailed",  # Используем форматтер 'detailed'
                "filters": [
                    "level_filter"
                ],  # Применение фильтра к обработчику
            },
        },
        "root": {  # Корневой логгер
            "handlers": ["console"],  # Добавляем обработчик 'console'
            "level": "DEBUG",  # Уровень логирования для корневого логгера
        },
    }

    # Применяем конфигурацию
    logging.config.dictConfig(logging_config)

    # Получаем корневой логгер
    logger = logging.getLogger()

    # Примеры сообщений
    logger.debug(
        "This is a debug message"
    )  # Это сообщение будет отфильтровано
    logger.warning("This is a warning message")  # Это сообщение будет записано
    logger.error("This is an error message")  # Это сообщение будет записано


"""
Класс LevelFilter
    __init__: Конструктор класса принимает параметр min_level, который 
    указывает минимальный уровень сообщений, которые должен пропускать фильтр.
    
    filter: Метод filter проверяет, соответствует ли уровень сообщения 
    минимальному уровню. Если да, сообщение пропускается.
"""

"""
    version: Указывает версию конфигурационного формата. В текущей реализации 
    поддерживается только версия 1.
    
    disable_existing_loggers: Устанавливает, нужно ли отключать уже 
    существующих логгеров. False оставляет их активными.
    
    formatters: Определяет формат сообщений. Формат 
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s' добавляет временную 
    метку, имя логгера, уровень сообщения и само сообщение.
    
    filters: Определяет фильтры, которые применяются к обработчикам. Фильтр 
    level_filter будет фильтровать сообщения, у которых уровень меньше WARNING.
    
    handlers: Определяет обработчики, которые обрабатывают и выводят сообщения.
    Обработчик console выводит сообщения в консоль и применяет форматтер 
    detailed.
    
    root: Настраивает корневой логгер, который использует обработчик console и 
    установлен на уровень DEBUG. Это означает, что все сообщения уровня DEBUG и
    выше будут направляться в консоль, но фильтр level_filter оставляет только
    сообщения уровня WARNING и выше.
"""
